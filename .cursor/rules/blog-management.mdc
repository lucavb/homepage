---
globs: src/content/blog/**/*,*.mdx
description: Blog content management and creation guidelines
---

# Blog Content Management

This rule defines the standards and workflow for creating and managing blog content.

## Blog Post Structure

### File Organization
- All blog posts go in `src/content/blog/` directory
- Use `.mdx` format for all blog posts to enable component imports
- **File names should closely match the title content**, not arbitrary names
  - Example: Title "Agent Hooks: Amazon's Take on Reactive Development" â†’ `agent-hooks-reactive-development.mdx`
  - Capture the main concepts from the title in the slug
- Create corresponding image directories: `src/assets/images/blog/slug-name/`

### Frontmatter Schema
Follow the schema defined in [src/content/config.ts](mdc:src/content/config.ts):

```yaml
---
title: 'Your Blog Post Title'
description: 'SEO-friendly description under 160 characters'
publishDate: 2025-01-20
tags: ['tag1', 'tag2', 'tag3']
heroImagePath: 'post-slug/hero.jpg'
draft: false
---
```

### Required Frontmatter Fields
- `title`: SEO-optimized title
- `description`: Meta description for search engines
- `publishDate`: Publication date in YYYY-MM-DD format
- `heroImagePath`: Path relative to `src/assets/images/blog/`
- `draft`: Boolean to control publication status

### Optional Fields
- `tags`: Array of relevant tags for categorization
- `thumbnail`: Custom thumbnail path (auto-generated if not provided)

## Content Creation Workflow

### Component Imports
Always import the necessary components at the top:

```mdx
import AutoOptimizedImage from '../../components/general/AutoOptimizedImage.astro';
import ImageLightbox from '../../components/general/ImageLightbox.astro';
import heroImage from '../../assets/images/blog/post-slug/hero.jpg';
```

**Note**: Only import ImageLightbox if you plan to include screenshots in the post.

### Hero Images
Use AutoOptimizedImage component for hero images:

```mdx
<AutoOptimizedImage
    src={heroImage}
    alt="Descriptive alt text for accessibility and SEO"
    loading="eager"
/>
```

### Screenshots and Additional Images
Use ImageLightbox component for screenshots:

```mdx
<ImageLightbox
    src={screenshotImage}
    alt="Descriptive alt text explaining what the screenshot shows"
    loading="lazy"
    class="w-full my-6 shadow-lg rounded-lg"
/>
```

### Image Processing Workflow
**CRITICAL**: Use Astro's automatic optimization correctly:

1. **Preprocess blog post images** (PNG to JPEG conversion):
   ```bash
   # Convert PNG to JPEG at 85% quality (full resolution)
   magick input.png -quality 85 hero.jpg
   ```

2. **Place single source image**: `src/assets/images/blog/post-slug/hero.jpg`

3. **Let Astro handle optimization**: Astro automatically generates all necessary resolutions (400px, 600px, 800px, 1024px) and formats (AVIF, WebP, JPG)

4. **Never manually create multiple sizes** - this is handled automatically by Astro

### Internal Linking
- **Use relative URLs**: `/blog/post-slug/` 
- **NOT absolute URLs**: `https://luca-becker.me/blog/post-slug/`
- This ensures links work in all environments

### Content Structure
- Start with hero image using AutoOptimizedImage component
- Use proper heading hierarchy (H2, H3, H4)
- Include code examples with proper syntax highlighting
- Add internal links to related posts when relevant

## SEO and Metadata

### Title Optimization
- Keep titles under 60 characters
- Include primary keywords naturally
- Make titles compelling and clickable

### Description Guidelines
- 120-160 characters for optimal search display
- Include primary keywords
- Write compelling copy that encourages clicks

### Tag Strategy
- Use 3-7 relevant tags per post
- Maintain consistency across related posts
- Include both broad and specific tags

## Content Quality Standards

### Writing Style
- Write in first person when sharing personal experiences
- Use clear, concise language
- Include practical examples and code snippets
- Maintain professional but approachable tone

### Technical Content
- Test all code examples before publishing
- Include proper error handling in examples
- Explain complex concepts step by step
- Provide context for technical decisions

### Accessibility
- Use descriptive alt text for all images
- Maintain proper heading structure
- Ensure good color contrast in any custom styling
- Write descriptive link text

## Publication Workflow

### Blog Post Setup Process
1. **Choose appropriate slug** based on title content
2. **Create frontmatter** with all required fields
3. **Add component imports** (AutoOptimizedImage + ImageLightbox if needed)
4. **Convert PNG to JPEG** using ImageMagick at 85% quality
5. **Create image directory** for the post
6. **Add hero image** at the top of the post
7. **Process any screenshots** and integrate with ImageLightbox

### Pre-Publication Checklist
1. Verify all frontmatter fields are complete
2. Test hero image displays correctly
3. Check all internal links use relative URLs
4. Verify code examples work as expected
5. Run spell check and grammar review
6. Ensure proper heading hierarchy
7. Verify screenshot integration if applicable

### Draft Management
- Set `draft: true` for work-in-progress posts
- Draft posts won't appear in production builds
- Use draft mode for content review and editing

### Content Updates
- Update `publishDate` only for major revisions
- Maintain original publication date for minor edits
- Consider adding update notes for significant changes

### File Management
- Clean up original image files after processing
- Remove temporary files and screenshots from project root
- Maintain organized asset structure