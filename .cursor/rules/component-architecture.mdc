---
globs: src/components/**/*
description: Component architecture and development patterns
---

# Component Architecture

This rule defines the architecture patterns and conventions for component development.

## Component Organization

### Directory Structure
- **General Components**: `src/components/general/` - Reusable across the site
- **Home Components**: `src/components/home/` - Specific to homepage sections
- **Layout Components**: `src/layouts/` - Page layout templates

### Component Categories

#### General Components
Reusable components that can be used across different pages:
- [AutoOptimizedImage.astro](mdc:src/components/general/AutoOptimizedImage.astro) - Optimized image handling
- [BlogCard.astro](mdc:src/components/general/BlogCard.astro) - Blog post preview cards
- [ProjectCard.astro](mdc:src/components/general/ProjectCard.astro) - Project showcase cards
- [ThemeToggle.astro](mdc:src/components/general/ThemeToggle.astro) - Dark/light mode toggle

#### Home Components
Page-specific components for the homepage:
- [Hero.astro](mdc:src/components/home/Hero.astro) - Hero section
- [AboutSection.astro](mdc:src/components/home/AboutSection.astro) - About section
- [ProjectsSection.astro](mdc:src/components/home/ProjectsSection.astro) - Projects showcase

## Component Development Patterns

### Props Interface
Always define TypeScript interfaces for component props:

```astro
---
interface Props {
    title: string;
    description?: string;
    class?: string;
    isVisible?: boolean;
}

const { 
    title, 
    description, 
    class: className = '', 
    isVisible = true 
} = Astro.props;
---
```

### Prop Destructuring
- Use destructuring with default values
- Rename `class` to `className` to avoid reserved word conflicts
- Provide sensible defaults for optional props

### Component Composition
- Favor composition over complex single components
- Use slots for flexible content insertion
- Create wrapper components for common patterns

## Styling Patterns

### CSS Classes
- Use Tailwind CSS classes exclusively
- Apply responsive design with established breakpoints
- Maintain dark mode support with `dark:` prefixes

### Class Composition
```astro
---
const baseClasses = 'rounded-lg shadow-md transition-all duration-300';
const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300'
};
const classes = `${baseClasses} ${variantClasses[variant]} ${className}`;
---
```

### Responsive Design
- Mobile-first approach with Tailwind breakpoints
- Use established patterns from existing components
- Test across different screen sizes

## Image Components

### AutoOptimizedImage Usage
For blog posts and content images:

```astro
<AutoOptimizedImage
    src={heroImage}
    alt="Descriptive alt text"
    loading="eager"
    class="w-full h-auto object-cover rounded-lg"
/>
```

### Image Props Standards
- Always include descriptive `alt` text
- Use `loading="eager"` for above-the-fold images
- Use `loading="lazy"` for below-the-fold images
- Include `decoding="async"` for performance

## Data Integration

### Type Safety
- Use interfaces from [src/types/index.ts](mdc:src/types/index.ts)
- Import data from [src/data/info.ts](mdc:src/data/info.ts)
- Maintain type safety throughout component hierarchy

### Content Collections
- Use Astro's content collections for blog data
- Handle collection queries in page components
- Pass processed data to presentation components

## Performance Considerations

### Component Optimization
- Keep components focused and single-purpose
- Avoid heavy computations in component scripts
- Use proper loading strategies for images and content

### Bundle Size
- Import only what's needed from external libraries
- Use tree-shaking friendly imports
- Avoid large dependencies in components

## Accessibility Standards

### Semantic HTML
- Use proper HTML elements for content structure
- Include ARIA labels where appropriate
- Maintain proper heading hierarchy

### Interactive Elements
- Ensure keyboard navigation works properly
- Include focus states for interactive elements
- Use semantic button and link elements

### Screen Reader Support
- Provide descriptive alt text for images
- Use proper labeling for form elements
- Include skip links for navigation

## Testing and Quality

### Component Validation
- Test components across different screen sizes
- Verify dark/light mode compatibility
- Check accessibility with screen readers

### Code Quality
- Follow established naming conventions
- Keep component files focused and readable
- Document complex logic with comments

### Integration Testing
- Test component integration with layout
- Verify data flow from pages to components
- Ensure proper error handling for missing data