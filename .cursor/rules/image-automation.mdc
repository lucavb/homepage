---
description: Modern image optimization workflow using Astro's automatic optimization
globs: src/assets/images/blog/**/*
alwaysApply: false
---
# Modern Image Optimization Workflow

## ✅ CURRENT WORKFLOW: Astro Auto-Optimization

**We now use single source images with Astro's automatic optimization.** This approach generates all formats and sizes automatically during build with optimal performance and type safety.

### Blog Post Image Workflow

1. **Single source image**: Place in `src/assets/images/blog/post-slug/hero.jpg`
2. **Use MDX format**: All blog posts are `.mdx` files
3. **Import and use AutoOptimizedImage**: Let Astro handle everything automatically

#### Current Directory Structure
```
src/assets/images/blog/
├── introducing-my-blog/
│   └── hero.jpg                    ← Single source image
├── rag-isnt-as-complex-as-you-think/
│   └── hero.jpg                    ← Single source image
├── building-weather-aware-lunch-bot-cursor/
│   ├── hero.jpg                    ← Hero image
│   ├── good-weather.jpg            ← Additional content images
│   └── bad-weather.jpg             ← Additional content images
└── lovable-dev-senior-developer-perspective-ai-design/
    ├── hero.jpg                    ← Hero image
    └── streamproxy.jpg             ← Additional content images
```

#### Blog Post Template
```mdx
---
title: 'Your Blog Post Title'
description: 'SEO-friendly description'
publishDate: 2025-01-20
tags: ['tag1', 'tag2']
heroImagePath: 'post-slug/hero.jpg'
draft: false
---

import AutoOptimizedImage from '../../components/general/AutoOptimizedImage.astro';
import heroImage from '../../assets/images/blog/post-slug/hero.jpg';

<AutoOptimizedImage
    src={heroImage}
    alt="Descriptive alt text for accessibility and SEO"
    loading="eager"
/>

# Your Blog Post Title

Content here...
```

### What Astro Generates Automatically

From **ONE source image**, Astro's Picture component automatically generates:
- **Multiple sizes**: 400px, 600px, 800px, 1024px (responsive breakpoints)
- **Multiple formats**: AVIF, WebP, JPG (with automatic fallbacks)
- **Optimized quality**: Automatic quality optimization per format
- **Lazy loading**: Built-in lazy loading and decoding optimization

**Total: 12+ optimized images** from a single source file, generated at build time!

### Components Available

- **`AutoOptimizedImage`**: Primary component for all blog images
  - Automatic responsive image generation
  - Multiple format support (AVIF, WebP, JPG)
  - Built-in lazy loading and performance optimization
  - Type-safe image imports

### Image Processing Guidelines

#### Source Image Preparation
**CRITICAL**: Only process source images once for quality and size optimization:

```bash
# Scale down and optimize source image quality (one-time only)
magick input.png -resize 1024x1024 -quality 95 hero.jpg
```

Then place in `src/assets/images/blog/post-slug/hero.jpg` and let Astro handle the rest.

#### Multiple Images Per Post
For posts with additional images beyond the hero:

```mdx
import heroImage from '../../assets/images/blog/post-slug/hero.jpg';
import additionalImage from '../../assets/images/blog/post-slug/additional-image.jpg';

<AutoOptimizedImage
    src={heroImage}
    alt="Hero image description"
    loading="eager"
/>

<!-- Later in the post -->
<AutoOptimizedImage
    src={additionalImage}
    alt="Additional image description"
    loading="lazy"
/>
```

## ❌ DEPRECATED: Manual ImageMagick Processing

**Do NOT manually generate multiple image sizes or formats.** The old workflow of creating 400.avif, 600.webp, 800.jpg, etc. is no longer used.

## Project Thumbnails

For project thumbnails (non-blog images), continue using single optimized images in `public/assets/images/`:

```bash
# One-time processing for project thumbnails
magick input-image.jpg -resize 400x300 -quality 95 public/assets/images/project-thumbnail.png
```

## Performance Benefits

### Astro Auto-Optimization (Current Approach)
- **Build-time optimization**: All images generated during build, not runtime
- **Automatic caching**: Reuses generated images across builds
- **Type safety**: Full TypeScript support with image imports
- **Zero manual work**: No commands to run, no files to track
- **Perfect formats**: Always generates optimal AVIF, WebP, and JPG
- **Responsive by default**: Automatic responsive image generation
- **SEO optimized**: Proper alt text and loading attributes

## Best Practices

1. **Always use the Astro workflow** for all blog images
2. **Use high-quality source images** (at least 1024px wide for hero images)
3. **Only process source images once** for size/quality optimization
4. **Maintain proper aspect ratios** in source images
5. **Use descriptive alt text** for accessibility and SEO
6. **Use `loading="eager"` for hero images** and `loading="lazy"` for content images

## Migration from Legacy Approach

If you have existing manually processed images in `public/assets/images/blog/`, you can:

1. **Keep existing posts as-is** - they'll continue working
2. **For new posts**: Always use the Astro workflow
3. **When updating old posts**: Migrate to the new workflow by:
   - Moving source image to `src/assets/images/blog/post-slug/hero.jpg`
   - Converting to `.mdx` format
   - Using `AutoOptimizedImage` component
   - Removing old manually generated images from `public/`
