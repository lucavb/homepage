---
import { Picture } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
    src: ImageMetadata;
    alt: string;
    width?: number;
    height?: number;
    loading?: 'lazy' | 'eager';
    decoding?: 'async' | 'sync' | 'auto';
    class?: string;
    sizes?: string;
    lightboxId?: string;
}

const {
    alt,
    class: className = 'w-full h-auto object-cover rounded-lg',
    decoding = 'async',
    height,
    lightboxId = `lightbox-${Math.random().toString(36).substring(2, 11)}`,
    loading = 'lazy',
    sizes = '(min-width: 1200px) 800px, (min-width: 800px) 600px, (min-width: 600px) 500px, 400px',
    src,
    width = 800,
} = Astro.props;
---

<div class="relative group cursor-pointer" data-lightbox-trigger={lightboxId}>
    <Picture
        alt={alt}
        class={className}
        decoding={decoding}
        formats={['avif', 'webp', 'jpg']}
        height={height}
        loading={loading}
        quality={85}
        sizes={sizes}
        src={src}
        width={width}
        widths={[400, 600, 800, 1024]}
    />

    <!-- Lens icon overlay -->
    <div
        class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 rounded-lg flex items-center justify-center"
    >
        <svg
            class="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300 drop-shadow-lg"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
        </svg>
    </div>
</div>

<!-- Lightbox overlay -->
<div
    id={lightboxId}
    class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden items-center justify-center p-4"
    data-lightbox-overlay={lightboxId}
>
    <div class="relative w-full h-full flex items-center justify-center">
        <!-- Close button -->
        <button
            class="absolute top-4 right-4 text-white hover:text-gray-300 transition-colors z-10 bg-black bg-opacity-50 rounded-full p-2"
            data-lightbox-close={lightboxId}
            aria-label="Close lightbox"
        >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>

        <!-- High-res image -->
        <Picture
            src={src}
            alt={alt}
            widths={[400, 600, 800, 1024, 1600, 2048, 3200].filter((w) => w <= src.width)}
            sizes={`(min-width: ${src.width}px) ${src.width}px, (min-width: 1600px) 1600px, (min-width: 1024px) 1024px, (min-width: 800px) 800px, (min-width: 600px) 600px, 400px`}
            formats={['avif', 'webp', 'jpg']}
            quality={98}
            class="max-w-[95vw] max-h-[95vh] w-auto h-auto object-contain rounded-lg"
            loading="lazy"
            decoding="async"
        />
    </div>
</div>

<script>
    class ImageLightbox {
        constructor() {
            this.init();
        }

        init() {
            document.addEventListener('click', this.handleClick.bind(this));
            document.addEventListener('keydown', this.handleKeydown.bind(this));
        }

        handleClick(event: MouseEvent) {
            if (event.target instanceof HTMLElement) {
                const target = event.target;
                const trigger = target.closest('[data-lightbox-trigger]');
                const closeBtn = target.closest('[data-lightbox-close]');
                const overlay = target.closest('[data-lightbox-overlay]');

                if (trigger) {
                    const lightboxId = trigger.getAttribute('data-lightbox-trigger');
                    if (lightboxId) this.openLightbox(lightboxId);
                } else if (closeBtn) {
                    const lightboxId = closeBtn.getAttribute('data-lightbox-close');
                    if (lightboxId) this.closeLightbox(lightboxId);
                } else if (overlay) {
                    const clickedOnImage = target.closest('picture, img');
                    const clickedOnCloseBtn = target.closest('[data-lightbox-close]');

                    if (!clickedOnImage && !clickedOnCloseBtn) {
                        const lightboxId = overlay.getAttribute('data-lightbox-overlay');
                        if (lightboxId) this.closeLightbox(lightboxId);
                    }
                }
            }
        }

        handleKeydown(event: KeyboardEvent) {
            if (event.key === 'Escape') {
                const openLightbox = document.querySelector('[data-lightbox-overlay]:not(.hidden)');
                if (openLightbox) {
                    const lightboxId = openLightbox.getAttribute('data-lightbox-overlay');
                    if (lightboxId) this.closeLightbox(lightboxId);
                }
            }
        }

        openLightbox(lightboxId: string) {
            const lightbox = document.getElementById(lightboxId);
            if (lightbox) {
                lightbox.classList.remove('hidden');
                lightbox.classList.add('flex');
                document.body.style.overflow = 'hidden';
            }
        }

        closeLightbox(lightboxId: string) {
            const lightbox = document.getElementById(lightboxId);
            if (lightbox) {
                lightbox.classList.add('hidden');
                lightbox.classList.remove('flex');
                document.body.style.overflow = '';
            }
        }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => new ImageLightbox());
    } else {
        new ImageLightbox();
    }
</script>
