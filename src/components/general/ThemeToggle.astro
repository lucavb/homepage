---
interface Props {
    id?: string;
    class?: string;
    variant?: 'dropdown' | 'toggle';
}

const { id = 'theme-toggle', class: className = '', variant = 'dropdown' } = Astro.props;
---

{
    variant === 'dropdown' ? (
        <div class={`relative ${className}`}>
            <button
                id={id}
                class="flex items-center justify-center w-10 h-10 rounded-lg border border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-600 dark:text-gray-300"
                aria-label="Toggle theme"
            >
                <svg id={`${id}-icon`} class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                    />
                </svg>
            </button>

            <div
                id={`${id}-dropdown`}
                class="absolute top-full right-0 mt-1 w-32 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg opacity-0 invisible transform scale-95 transition-all duration-150 z-50 overflow-hidden"
            >
                <div class="py-1">
                    <button
                        class="theme-option flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-0"
                        data-theme="light"
                    >
                        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
                            />
                        </svg>
                        Light
                    </button>
                    <button
                        class="theme-option flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-0"
                        data-theme="dark"
                    >
                        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                            />
                        </svg>
                        Dark
                    </button>
                    <button
                        class="theme-option flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors border-0"
                        data-theme="system"
                    >
                        <svg class="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                            />
                        </svg>
                        System
                    </button>
                </div>
            </div>
        </div>
    ) : (
        <div id={id} class={`flex items-center bg-gray-100 dark:bg-gray-800 rounded-lg p-1 ${className}`}>
            <button
                class="theme-option flex items-center justify-center w-8 h-8 rounded-md transition-all duration-200 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
                data-theme="system"
                aria-label="System theme"
            >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                    />
                </svg>
            </button>

            <button
                class="theme-option flex items-center justify-center w-8 h-8 rounded-md transition-all duration-200 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
                data-theme="light"
                aria-label="Light theme"
            >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
                    />
                </svg>
            </button>

            <button
                class="theme-option flex items-center justify-center w-8 h-8 rounded-md transition-all duration-200 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
                data-theme="dark"
                aria-label="Dark theme"
            >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                    />
                </svg>
            </button>
        </div>
    )
}

<script>
    function initThemeToggle() {
        const browserTheme = document.querySelector('[name="theme-color"]');

        const icons = {
            light: `<svg id="theme-toggle-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
            </svg>`,
            dark: `<svg id="theme-toggle-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
            </svg>`,
            system: `<svg id="theme-toggle-icon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>`,
        };

        function applyTheme(theme) {
            const actualTheme =
                theme === 'system'
                    ? window.matchMedia('(prefers-color-scheme: dark)').matches
                        ? 'dark'
                        : 'light'
                    : theme;

            if (actualTheme === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark');
                document.documentElement.classList.add('dark');
                if (browserTheme instanceof HTMLMetaElement) browserTheme.content = '#111111';
            } else {
                document.documentElement.setAttribute('data-theme', 'light');
                document.documentElement.classList.remove('dark');
                if (browserTheme instanceof HTMLMetaElement) browserTheme.content = '#FFFFFF';
            }

            // Update dropdown button icon
            const dropdownIcon = document.querySelector('[id$="-icon"]');
            if (dropdownIcon) {
                dropdownIcon.outerHTML = icons[theme];
            }

            // Update toggle button states
            document.querySelectorAll('.theme-option').forEach((btn) => {
                const btnTheme = btn.getAttribute('data-theme');
                if (btnTheme === theme) {
                    btn.classList.add(
                        'bg-white',
                        'dark:bg-gray-700',
                        'shadow-sm',
                        'text-gray-900',
                        'dark:text-gray-100',
                    );
                    btn.classList.remove('text-gray-600', 'dark:text-gray-400');
                } else {
                    btn.classList.remove(
                        'bg-white',
                        'dark:bg-gray-700',
                        'shadow-sm',
                        'text-gray-900',
                        'dark:text-gray-100',
                    );
                    btn.classList.add('text-gray-600', 'dark:text-gray-400');
                }
            });
        }

        function getPreferredTheme() {
            const stored = localStorage.getItem('theme');
            return stored || 'system';
        }

        function setTheme(theme) {
            localStorage.setItem('theme', theme);
            applyTheme(theme);
        }

        // Initialize theme
        const currentTheme = getPreferredTheme();
        applyTheme(currentTheme);

        // Dropdown functionality
        const dropdownButton = document.querySelector('button[id="theme-toggle"]');
        const dropdown = document.querySelector('[id$="-dropdown"]');

        if (dropdownButton && dropdown) {
            let hideTimeout;
            let isDropdownOpen = false;

            const showDropdown = () => {
                if (hideTimeout) {
                    clearTimeout(hideTimeout);
                    hideTimeout = null;
                }
                dropdown.classList.remove('opacity-0', 'invisible', 'scale-95');
                dropdown.classList.add('opacity-100', 'visible', 'scale-100');
                isDropdownOpen = true;
            };

            const hideDropdown = () => {
                dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
                dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
                isDropdownOpen = false;
            };

            const scheduleHide = (delay = 300) => {
                if (hideTimeout) {
                    clearTimeout(hideTimeout);
                }
                hideTimeout = setTimeout(() => {
                    hideDropdown();
                    hideTimeout = null;
                }, delay);
            };

            const cancelHide = () => {
                if (hideTimeout) {
                    clearTimeout(hideTimeout);
                    hideTimeout = null;
                }
            };

            // Show on hover or click
            dropdownButton.addEventListener('mouseenter', () => {
                cancelHide();
                showDropdown();
            });

            dropdownButton.addEventListener('click', (e) => {
                e.stopPropagation();
                if (isDropdownOpen) {
                    hideDropdown();
                } else {
                    showDropdown();
                }
            });

            // Keep dropdown open when hovering over it
            dropdown.addEventListener('mouseenter', () => {
                cancelHide();
            });

            dropdown.addEventListener('mouseleave', () => {
                scheduleHide();
            });

            // Hide when leaving button (with delay)
            dropdownButton.addEventListener('mouseleave', () => {
                scheduleHide();
            });

            // Close on outside click
            document.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                if (!dropdownButton.contains(target) && !dropdown.contains(target)) {
                    hideDropdown();
                }
            });

            // Close on escape
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    hideDropdown();
                }
            });
        }

        // Add event listeners to all theme buttons
        document.querySelectorAll('.theme-option').forEach((button) => {
            button.addEventListener('click', () => {
                const theme = button.getAttribute('data-theme');
                if (theme) {
                    setTheme(theme);
                    // Hide dropdown after selection
                    const dropdown = document.querySelector('[id$="-dropdown"]');
                    if (dropdown) {
                        dropdown.classList.add('opacity-0', 'invisible', 'scale-95');
                        dropdown.classList.remove('opacity-100', 'visible', 'scale-100');
                    }
                }
            });
        });

        // Update theme when system preference changes
        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
            if (getPreferredTheme() === 'system') {
                applyTheme('system');
            }
        });
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initThemeToggle);
    } else {
        initThemeToggle();
    }
</script>
